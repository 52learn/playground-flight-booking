spring.application.name=flight-booking-assistant

spring.threads.virtual.enabled=true

###################
# Gen AI Models
###################

## OpenAI
spring.ai.openai.api-key=${OPENAI_API_KEY}
spring.ai.openai.chat.options.model=gpt-4o-mini
# spring.ai.openai.chat.options.model=gpt-4o

## Ollama
spring.ai.ollama.chat.options.model=llama3.2
spring.ai.ollama.embedding.options.model=mxbai-embed-large

## Anthropic Claude 3
# spring.ai.anthropic.api-key=${ANTHROPIC_API_KEY}
# spring.ai.openai.chat.options.model=llama3-70b-8192
# spring.ai.anthropic.chat.options.model=claude-3-5-sonnet-20240620

## Groq
# spring.ai.openai.api-key=${GROQ_API_KEY}
# spring.ai.openai.base-url=https://api.groq.com/openai
# spring.ai.openai.chat.options.model=llama3-70b-8192

## Azure OpenAI
# spring.ai.azure.openai.api-key=${AZURE_OPENAI_API_KEY}
# spring.ai.azure.openai.endpoint=${AZURE_OPENAI_ENDPOINT}
# spring.ai.azure.openai.chat.options.deployment-name=gpt-4o

## Mistral AI
# spring.ai.mistralai.api-key=${MISTRAL_AI_API_KEY}
# spring.ai.mistralai.chat.options.model=mistral-small-latest
# spring.ai.mistralai.chat.options.model=mistral-small-latest

## Vertex AI Gemini
# spring.ai.vertex.ai.gemini.project-id=${VERTEX_AI_GEMINI_PROJECT_ID}
# spring.ai.vertex.ai.gemini.location=${VERTEX_AI_GEMINI_LOCATION}
# spring.ai.vertex.ai.gemini.chat.options.model=gemini-1.5-pro-001
# # spring.ai.vertex.ai.gemini.chat.options.model=gemini-1.5-flash-001
# spring.ai.vertex.ai.gemini.chat.options.transport-type=REST


###################
# Vector Stores
###################

## Chroma DB
spring.ai.vectorstore.chroma.client.host=http://localhost
spring.ai.vectorstore.chroma.client.port=8000
spring.ai.vectorstore.chroma.initialize-schema=true

##  Milvus
## Change the dimentions to 384 if the local huggingface embedding 
## (e.g. spring-ai-transformers-spring-boot-starter) is used.
# spring.ai.vectorstore.milvus.embedding-dimension=384

## PGVector
# spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
# spring.datasource.username=postgres
# spring.datasource.password=postgres
# spring.ai.vectorstore.pgvector.initialize-schema=true

## QDrant
# spring.ai.vectorstore.qdrant.host=localhost
# spring.ai.vectorstore.qdrant.port=6334


#########################
# Spring AI Observability
#########################

## Include the Chatclient input in observations
spring.ai.chat.client.observation.include-input=true

## Include the VectorStore query and response in observations
spring.ai.vector.store.observations.include-query-response=true

## Include prompt and completion contents in observations
spring.ai.chat.observations.include-prompt=true
spring.ai.chat.observations.include-completion=true

## Include error logging in observations (note: not needed for Spring Web apps)
spring.ai.chat.observations.include-error-logging=true

#########################
#  Observability - Common
#########################

## Enable context propagation for Reactor
spring.reactor.context-propagation=auto

## Metrics
management.endpoints.web.exposure.include=health, info, metrics, prometheus
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=flight-booking-assistant

## Percentiles histogram
management.metrics.distribution.percentiles-histogram.gen_ai.client.operation=true
management.metrics.distribution.percentiles-histogram.db.vector.client.operation=true
management.metrics.distribution.percentiles-histogram.spring.ai.chat.client=true

## Tracing
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans

## Logging
# logging.pattern.correlation=[${spring.application.name:},%X{traceId:-},%X{spanId:-}]

# Disable PDF reader logs
logging.level.com.zaxxer.hikari=ERROR
logging.level.org.springframework.ai=ERROR
logging.level.org.apache.fontbox.ttf=ERROR
logging.level.org.apache.pdfbox.pdmodel.font=OFF
logging.level.org.apache.fontbox.ttf=OFF
logging.level.org.atmosphere=OFF

